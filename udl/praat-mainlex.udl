# UDL lexer for PRAAT.
#
# Note: UDL is a state machine and it uses regular expressions to move between
#       the different language states.
#

language PRAAT

################ Boilerplate ################

# Boilerplate - need to start with family set to markup and IN_M_DEFAULT state,
# we'll later perform a null-transition change to get into the SSL state.
family markup
initial IN_M_DEFAULT
# Null-transition to get into SSL state
state IN_M_DEFAULT:
/./ : redo, => IN_SSL_DEFAULT

################ Language Start ################

family ssl # server side language

# Specify the min and max styles we'll be referring to.
start_style SSL_DEFAULT
end_style SSL_VARIABLE

# If the language has keywords, specify which style needs to be transformed
keyword_style SSL_IDENTIFIER => SSL_WORD
keywords [
        # Keywords
        "if",
        "else",
        "endif",
        "while",
        "endwhile",
        "procedure",
        "endproc",
        "for",
        "endfor",
        "from",
        "to",
        "select",
        "plus",
        "Formant",
        "Sound",
        "TextGrid",
        "and",
        "or",
        "not",
        "div",
        "mod",
        "View \& Edit",
        "Remove",
        "Get number of tiers",
        "clearinfo"
        ]

# Set the basic patterns we'll be using for styling transitions.
# For most programming languages, names cannot start with a number, but they
# often allow a number after the first character - e.g. "bar21a"
pattern FIRSTNAMECHAR = '_a-zA-Z\x80-\xff' # names (identifier, keyword, variable...) only can start with these chars
pattern NAMECHAR = '$FIRSTNAMECHAR\d'      # rest of the name, after the first char
pattern WS = '\s\t\r\n'                    # whitespace
pattern OP = '!#%\(\)\*\+,-\.\/:;<=>\?@\[\]\^\{\}~|\''  # operator characters - escaping special regex values

################ Default Style ################

# Define what happens when in default (initial) state. This is where we set up
# the transitions to other states.
state IN_SSL_DEFAULT:

# ----------- Entering Comments ---------- #

# Hash-style one line comments
'#' : paint(upto, SSL_DEFAULT),  => IN_SSL_COMMENT_TO_EOL

# Pascal-style block comments
#'(*' : paint(upto, SSL_DEFAULT), => IN_SSL_COMMENT_PASCAL_BLOCK

# ----------- Entering Whitespace ---------- #

# Just stay in whatever style we currently are using.
/[$WS]+/  : #stay

# ----------- Entering Strings ---------- #

'"' : paint(upto, SSL_DEFAULT), => IN_SSL_DSTRING
# '\'' : paint(upto, SSL_DEFAULT), => IN_SSL_SSTRING
# '`' : paint(upto, SSL_DEFAULT), => IN_SSL_XSTRING

# ----------- Entering Numbers ---------- #

# Go process a number, try to do it in regexes octal and hex first.
/0[Xx][0-9a-fA-F]+/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER)  # Hex numbers
/[-+]?0[0-7]*/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER)       # Octal numbers
/[-+]?[1-9]+/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER)        # Regular numbers

# ----------- Entering Commands - terminates in ... or : or followed by ( ----------- #
/[$FIRSTNAMECHAR][$NAMECHAR\s\(\)]*\.\.\./ : paint(upto, SSL_DEFAULT), paint(include, SSL_WORD)
/@?[$FIRSTNAMECHAR][$NAMECHAR\s]*:/ : paint(upto, SSL_DEFAULT), paint(include, SSL_WORD)
/@?[$FIRSTNAMECHAR][$NAMECHAR\s]*\$?:/ : paint(upto, SSL_DEFAULT), paint(include, SSL_WORD)
/[$FIRSTNAMECHAR][$NAMECHAR]*\$?\s*(?=\()/ : paint(upto, SSL_DEFAULT), paint(include, SSL_WORD)

# ----------- Entering String variables - ends in $ and not followed by ( ---------- #

/[$FIRSTNAMECHAR][$NAMECHAR]*\$(?=\s*[^\(])/ : paint(upto, SSL_DEFAULT), paint(include, SSL_REGEX)
/([$FIRSTNAMECHAR][$NAMECHAR]*)?.[$FIRSTNAMECHAR][$NAMECHAR]*\$(?=\s*[^\(])/ : paint(upto, SSL_DEFAULT), paint(include, SSL_REGEX)

# ----------- Entering Operators ---------- #

/[$OP]/ : paint(upto, SSL_DEFAULT), paint(include, SSL_OPERATOR)

# ----------- None of the above on the line, whole line should be a command -------- #
# Problem: keywords have yet to be identified, so don't know if any are present
# /^.*$/ : paint(upto, SSL_DEFAULT), paint(include, SSL_WORD)

# ----------- Entering Identifiers ---------- #

/[$FIRSTNAMECHAR][$NAMECHAR]*/ : paint(upto, SSL_DEFAULT), paint(include, SSL_IDENTIFIER)

################ In Comments - determines how we exit a comment ################

state IN_SSL_COMMENT_TO_EOL: 
/[\r\n]/ : paint(upto, SSL_COMMENT), => IN_SSL_DEFAULT  # back to default state

state IN_SSL_COMMENT_PASCAL_BLOCK: 
'*)' : paint(include, SSL_COMMENTBLOCK), => IN_SSL_DEFAULT  # back to default state

################ In Strings - determines how we exit a string ################

state IN_SSL_DSTRING:
'"' : paint(include, SSL_STRING), => IN_SSL_DEFAULT  # back to default state
# /\\./ : #stay, anything escaped means it's still a string

state IN_SSL_SSTRING:
'\'' : paint(include, SSL_STRING), => IN_SSL_DEFAULT  # back to default state
# /\\./ : #stay, anything escaped means it's still a string

state IN_SSL_XSTRING:
'`' : paint(include, SSL_STRING), => IN_SSL_DEFAULT  # back to default state
# /\\./ : #stay, anything escaped means it's still a string

################ End of State Handling ################


################ Fold Handling ################

# Uncomment to enable folding on "{" and "}"

#fold "{" SSL_OPERATOR +
#fold "}" SSL_OPERATOR -
fold "if" SSL_WORD +
fold "endif" SSL_WORD -
fold "for" SSL_WORD +
fold "endfor" SSL_WORD -
fold "while" SSL_WORD +
fold "endwhile" SSL_WORD -
fold "procedure" SSL_WORD +
fold "endproc" SSL_WORD -

################ End of Fold Handling ################
